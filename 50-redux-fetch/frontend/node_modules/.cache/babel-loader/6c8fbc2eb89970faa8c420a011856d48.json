{"ast":null,"code":"var _jsxFileName = \"/Users/hyeokjung.kim/Flatiron-LI/012720/50-redux-fetch/frontend/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'; // redux dependencies\n\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux'; // routing dependencies\n\nimport { BrowserRouter } from 'react-router-dom';\nlet chipInitialState = {\n  // Change the key-value pairs here\n  chips: []\n}; // whatever gets returned from the reducer BECOMES the state\n\nlet chipReducer = (state = chipInitialState, action) => {\n  switch (action.type) {\n    case \"SET_ALL_CHIPS\":\n      let theArrayOfChips = action.payload;\n      return { ...state,\n        chips: theArrayOfChips\n      };\n\n    case \"ADD_ONE_CHIP\":\n      let theChipIwantToAdd = action.payload;\n      let copyOfChips = [...state.chips, theChipIwantToAdd];\n      return { ...state,\n        chips: copyOfChips\n      };\n\n    case \"REMOVE_CHIP\":\n      let theChipName = action.payload;\n      let filteredChips = state.chips.filter(chip => {\n        return chip.name !== theChipName;\n      });\n      return { ...state,\n        chips: filteredChips\n      };\n\n    default:\n      return state;\n  }\n};\n\nlet userInitialState = {\n  id: 0,\n  token: \"\",\n  username: \"\",\n  user_chips: []\n};\n\nlet userReducer = (state = userInitialState, action) => {\n  switch (action.type) {\n    case \"SET_USER_INFORMATION\":\n      return { ...state,\n        id: action.payload.user.id\n      };\n\n    default:\n      return state;\n  }\n}; // if an action gets dispatched, that action will be ran through all of the reducers\n\n\nlet rootReducer = combineReducers({\n  chipInformation: chipReducer,\n  userInformation: userReducer // any other reducers will go here\n\n});\nlet storeObject = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\nReactDOM.render( /*#__PURE__*/React.createElement(BrowserRouter, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(Provider, {\n  store: storeObject,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }\n}))), document.getElementById('root')); //","map":{"version":3,"sources":["/Users/hyeokjung.kim/Flatiron-LI/012720/50-redux-fetch/frontend/src/index.js"],"names":["React","ReactDOM","App","createStore","combineReducers","Provider","BrowserRouter","chipInitialState","chips","chipReducer","state","action","type","theArrayOfChips","payload","theChipIwantToAdd","copyOfChips","theChipName","filteredChips","filter","chip","name","userInitialState","id","token","username","user_chips","userReducer","user","rootReducer","chipInformation","userInformation","storeObject","window","__REDUX_DEVTOOLS_EXTENSION__","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB,C,CAEA;;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CAEA;;AACA,SAAQC,aAAR,QAA4B,kBAA5B;AAIA,IAAIC,gBAAgB,GAAG;AACrB;AACAC,EAAAA,KAAK,EAAE;AAFc,CAAvB,C,CAKA;;AACA,IAAIC,WAAW,GAAG,CAACC,KAAK,GAAGH,gBAAT,EAA2BI,MAA3B,KAAsC;AAEtD,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAK,eAAL;AAEE,UAAIC,eAAe,GAAGF,MAAM,CAACG,OAA7B;AACA,aAAO,EACL,GAAGJ,KADE;AAELF,QAAAA,KAAK,EAAEK;AAFF,OAAP;;AAMF,SAAK,cAAL;AAEE,UAAIE,iBAAiB,GAAGJ,MAAM,CAACG,OAA/B;AACA,UAAIE,WAAW,GAAG,CAAC,GAAGN,KAAK,CAACF,KAAV,EAAiBO,iBAAjB,CAAlB;AAGA,aAAO,EACL,GAAGL,KADE;AAELF,QAAAA,KAAK,EAAEQ;AAFF,OAAP;;AAMF,SAAK,aAAL;AACE,UAAIC,WAAW,GAAGN,MAAM,CAACG,OAAzB;AACA,UAAII,aAAa,GAAGR,KAAK,CAACF,KAAN,CAAYW,MAAZ,CAAoBC,IAAD,IAAU;AAC/C,eAAOA,IAAI,CAACC,IAAL,KAAcJ,WAArB;AACD,OAFmB,CAApB;AAIA,aAAO,EACL,GAAGP,KADE;AAELF,QAAAA,KAAK,EAAEU;AAFF,OAAP;;AAKF;AACE,aAAOR,KAAP;AAnCJ;AAsCD,CAxCD;;AAkDA,IAAIY,gBAAgB,GAAG;AACrBC,EAAAA,EAAE,EAAE,CADiB;AAErBC,EAAAA,KAAK,EAAE,EAFc;AAGrBC,EAAAA,QAAQ,EAAE,EAHW;AAIrBC,EAAAA,UAAU,EAAE;AAJS,CAAvB;;AAOA,IAAIC,WAAW,GAAG,CAACjB,KAAK,GAAGY,gBAAT,EAA2BX,MAA3B,KAAsC;AAEtD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,sBAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELa,QAAAA,EAAE,EAAEZ,MAAM,CAACG,OAAP,CAAec,IAAf,CAAoBL;AAFnB,OAAP;;AAOF;AACE,aAAOb,KAAP;AAVJ;AAaD,CAfD,C,CAkBA;;;AACA,IAAImB,WAAW,GAAGzB,eAAe,CAAC;AAChC0B,EAAAA,eAAe,EAAErB,WADe;AAEhCsB,EAAAA,eAAe,EAAEJ,WAFe,CAGhC;;AAHgC,CAAD,CAAjC;AAUA,IAAIK,WAAW,GAAG7B,WAAW,CAAC0B,WAAD,EAAcI,MAAM,CAACC,4BAAP,IAAuCD,MAAM,CAACC,4BAAP,EAArD,CAA7B;AASAjC,QAAQ,CAACkC,MAAT,eACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEH,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,CADJ,EAMEI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF,E,CAwCA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n// redux dependencies\nimport { createStore, combineReducers } from 'redux'\nimport { Provider } from 'react-redux'\n\n// routing dependencies\nimport {BrowserRouter} from 'react-router-dom'\n\n\n\nlet chipInitialState = {\n  // Change the key-value pairs here\n  chips: []\n}\n\n// whatever gets returned from the reducer BECOMES the state\nlet chipReducer = (state = chipInitialState, action) => {\n\n  switch (action.type) {\n\n    case \"SET_ALL_CHIPS\":\n\n      let theArrayOfChips = action.payload\n      return {\n        ...state,\n        chips: theArrayOfChips\n      }\n\n\n    case \"ADD_ONE_CHIP\":\n\n      let theChipIwantToAdd = action.payload\n      let copyOfChips = [...state.chips, theChipIwantToAdd]\n\n\n      return {\n        ...state,\n        chips: copyOfChips\n      }\n\n\n    case \"REMOVE_CHIP\":\n      let theChipName = action.payload\n      let filteredChips = state.chips.filter((chip) => {\n        return chip.name !== theChipName\n      })\n\n      return {\n        ...state,\n        chips: filteredChips\n      }\n\n    default:\n      return state\n  }\n\n}\n\n\n\n\n\n\n\n\n\nlet userInitialState = {\n  id: 0,\n  token: \"\",\n  username: \"\",\n  user_chips: [],\n}\n\nlet userReducer = (state = userInitialState, action) => {\n\n  switch (action.type) {\n    case \"SET_USER_INFORMATION\":\n      return {\n        ...state,\n        id: action.payload.user.id\n      }\n\n\n\n    default:\n      return state\n  }\n\n}\n\n\n// if an action gets dispatched, that action will be ran through all of the reducers\nlet rootReducer = combineReducers({\n  chipInformation: chipReducer,\n  userInformation: userReducer,\n  // any other reducers will go here\n})\n\n\n\n\n\nlet storeObject = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\n\n\n\n\n\n\n\nReactDOM.render(\n    <BrowserRouter>\n      <Provider store={storeObject}>\n        <App />\n      </Provider>\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//\n"]},"metadata":{},"sourceType":"module"}