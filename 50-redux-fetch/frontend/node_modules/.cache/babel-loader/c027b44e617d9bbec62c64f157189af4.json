{"ast":null,"code":"var _jsxFileName = \"/Users/hyeokjung.kim/Flatiron-LI/012720/48-react-redux/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport chipsArray from './chips'; // redux dependencies\n\nimport { createStore } from 'redux';\nlet initialState = {\n  // Change the key-value pairs here\n  chips: chipsArray\n}; // whatever gets returned from the reducer BECOMES the global state\n\nlet theReducer = (state = initialState, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\n\nlet storeObject = createStore(theReducer);\nconsole.log(storeObject.getState());\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/hyeokjung.kim/Flatiron-LI/012720/48-react-redux/src/index.js"],"names":["React","ReactDOM","App","chipsArray","createStore","initialState","chips","theReducer","state","action","type","storeObject","console","log","getState","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,UAAP,MAAuB,SAAvB,C,CAEA;;AACA,SAASC,WAAT,QAA4B,OAA5B;AAEA,IAAIC,YAAY,GAAG;AACjB;AACAC,EAAAA,KAAK,EAAEH;AAFU,CAAnB,C,CAUA;;AACA,IAAII,UAAU,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAEjD,UAAQA,MAAM,CAACC,IAAf;AAEE;AACE,aAAOF,KAAP;AAHJ;AAMD,CARD;;AAgBA,IAAIG,WAAW,GAAGP,WAAW,CAACG,UAAD,CAA7B;AACAK,OAAO,CAACC,GAAR,CAAYF,WAAW,CAACG,QAAZ,EAAZ;AAKAb,QAAQ,CAACc,MAAT,eACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,EAEEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFF","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport chipsArray from './chips'\n\n// redux dependencies\nimport { createStore } from 'redux'\n\nlet initialState = {\n  // Change the key-value pairs here\n  chips: chipsArray,\n}\n\n\n\n\n\n\n// whatever gets returned from the reducer BECOMES the global state\nlet theReducer = (state = initialState, action) => {\n\n  switch (action.type) {\n\n    default:\n      return state\n  }\n\n}\n\n\n\n\n\n\n\nlet storeObject = createStore(theReducer)\nconsole.log(storeObject.getState());\n\n\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}