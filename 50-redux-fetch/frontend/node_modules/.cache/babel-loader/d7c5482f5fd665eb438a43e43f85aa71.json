{"ast":null,"code":"var _jsxFileName = \"/Users/hyeokjung.kim/Flatiron-LI/012720/46-predux/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'; // redux dependencies\n\nimport { createStore } from 'redux';\nlet initialState = {\n  // Change the key-value pairs here\n  hello: \"this is inside the state\",\n  chips: [],\n  number: 0\n}; // whatever gets returned from the reducer BECOMES the global state\n\nlet theReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"ADD_NUMBER\":\n      // action =  {type: \"ADD_NUMBER\", payload: 3}\n      // console.log(action);\n      // console.log(state);\n      let theNewNumber = state.number + action.payload;\n      return { ...state,\n        number: theNewNumber\n      };\n\n    case \"SUBTRACT_NUMBER\":\n      // action = {type: \"SUBTRACT_NUMBER\", payload: {number: 5} }\n      let subtracted_number = state.number - action.payload.number;\n      return { ...state,\n        number: subtracted_number\n      };\n\n    default:\n      return state;\n  }\n};\n\nlet storeObject = createStore(theReducer);\nlet globalState = storeObject.getState();\nconsole.log(\"BEFORE WE DO ANYTHING:\", globalState.number);\nlet theActionToIncreaseBy3 = {\n  type: \"ADD_NUMBER\",\n  payload: 3\n};\nstoreObject.dispatch(theActionToIncreaseBy3);\nstoreObject.dispatch(theActionToIncreaseBy3);\nstoreObject.dispatch(theActionToIncreaseBy3);\nstoreObject.dispatch({\n  type: \"SUBTRACT_NUMBER\",\n  payload: {\n    number: 5\n  }\n});\nstoreObject.dispatch({\n  type: \"SUBTRACT_NUMBER\",\n  payload: {\n    number: 5\n  }\n});\nstoreObject.dispatch({\n  type: \"SUBTRACT_NUMBER\",\n  payload: {\n    number: 5\n  }\n});\nconsole.log(\"AFTER WE DISPATCH:\", storeObject.getState().number);\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/hyeokjung.kim/Flatiron-LI/012720/46-predux/src/index.js"],"names":["React","ReactDOM","App","createStore","initialState","hello","chips","number","theReducer","state","action","type","theNewNumber","payload","subtracted_number","storeObject","globalState","getState","console","log","theActionToIncreaseBy3","dispatch","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB,C,CAGA;;AACA,SAASC,WAAT,QAA4B,OAA5B;AAEA,IAAIC,YAAY,GAAG;AACjB;AACAC,EAAAA,KAAK,EAAE,0BAFU;AAGjBC,EAAAA,KAAK,EAAE,EAHU;AAIjBC,EAAAA,MAAM,EAAE;AAJS,CAAnB,C,CAQA;;AACA,IAAIC,UAAU,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AAEjD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,YAAL;AACE;AACA;AACA;AAEA,UAAIC,YAAY,GAAGH,KAAK,CAACF,MAAN,GAAeG,MAAM,CAACG,OAAzC;AAEA,aAAO,EACL,GAAGJ,KADE;AAELF,QAAAA,MAAM,EAAEK;AAFH,OAAP;;AAKF,SAAK,iBAAL;AACE;AACA,UAAIE,iBAAiB,GAAGL,KAAK,CAACF,MAAN,GAAeG,MAAM,CAACG,OAAP,CAAeN,MAAtD;AAGA,aAAO,EACL,GAAGE,KADE;AAELF,QAAAA,MAAM,EAAEO;AAFH,OAAP;;AAKF;AACE,aAAOL,KAAP;AAxBJ;AA2BD,CA7BD;;AA+BA,IAAIM,WAAW,GAAGZ,WAAW,CAACK,UAAD,CAA7B;AACA,IAAIQ,WAAW,GAAGD,WAAW,CAACE,QAAZ,EAAlB;AAEAC,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCH,WAAW,CAACT,MAAlD;AAEA,IAAIa,sBAAsB,GAAG;AAC3BT,EAAAA,IAAI,EAAE,YADqB;AAE3BE,EAAAA,OAAO,EAAE;AAFkB,CAA7B;AAKAE,WAAW,CAACM,QAAZ,CAAqBD,sBAArB;AACAL,WAAW,CAACM,QAAZ,CAAqBD,sBAArB;AACAL,WAAW,CAACM,QAAZ,CAAqBD,sBAArB;AAEAL,WAAW,CAACM,QAAZ,CAAqB;AAACV,EAAAA,IAAI,EAAE,iBAAP;AAA0BE,EAAAA,OAAO,EAAE;AAACN,IAAAA,MAAM,EAAE;AAAT;AAAnC,CAArB;AACAQ,WAAW,CAACM,QAAZ,CAAqB;AAACV,EAAAA,IAAI,EAAE,iBAAP;AAA0BE,EAAAA,OAAO,EAAE;AAACN,IAAAA,MAAM,EAAE;AAAT;AAAnC,CAArB;AACAQ,WAAW,CAACM,QAAZ,CAAqB;AAACV,EAAAA,IAAI,EAAE,iBAAP;AAA0BE,EAAAA,OAAO,EAAE;AAACN,IAAAA,MAAM,EAAE;AAAT;AAAnC,CAArB;AAIAW,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCJ,WAAW,CAACE,QAAZ,GAAuBV,MAAzD;AAOAN,QAAQ,CAACqB,MAAT,eACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,EAEEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFF","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n// redux dependencies\nimport { createStore } from 'redux'\n\nlet initialState = {\n  // Change the key-value pairs here\n  hello: \"this is inside the state\",\n  chips: [],\n  number: 0\n}\n\n\n// whatever gets returned from the reducer BECOMES the global state\nlet theReducer = (state = initialState, action) => {\n\n  switch (action.type) {\n    case \"ADD_NUMBER\":\n      // action =  {type: \"ADD_NUMBER\", payload: 3}\n      // console.log(action);\n      // console.log(state);\n\n      let theNewNumber = state.number + action.payload\n      \n      return {\n        ...state,\n        number: theNewNumber\n      }\n\n    case \"SUBTRACT_NUMBER\":\n      // action = {type: \"SUBTRACT_NUMBER\", payload: {number: 5} }\n      let subtracted_number = state.number - action.payload.number\n\n\n      return {\n        ...state,\n        number: subtracted_number\n      }\n\n    default:\n      return state\n  }\n\n}\n\nlet storeObject = createStore(theReducer)\nlet globalState = storeObject.getState()\n\nconsole.log(\"BEFORE WE DO ANYTHING:\", globalState.number);\n\nlet theActionToIncreaseBy3 = {\n  type: \"ADD_NUMBER\",\n  payload: 3\n}\n\nstoreObject.dispatch(theActionToIncreaseBy3)\nstoreObject.dispatch(theActionToIncreaseBy3)\nstoreObject.dispatch(theActionToIncreaseBy3)\n\nstoreObject.dispatch({type: \"SUBTRACT_NUMBER\", payload: {number: 5} })\nstoreObject.dispatch({type: \"SUBTRACT_NUMBER\", payload: {number: 5} })\nstoreObject.dispatch({type: \"SUBTRACT_NUMBER\", payload: {number: 5} })\n\n\n\nconsole.log(\"AFTER WE DISPATCH:\", storeObject.getState().number);\n\n\n\n\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}