{"ast":null,"code":"var _jsxFileName = \"/Users/hyeokjung.kim/Flatiron-LI/012720/49-combining-it-all/frontend/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'; // redux dependencies\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nlet initialState = {\n  // Change the key-value pairs here\n  chips: chipsArray,\n  hello: \"From inside the state\"\n}; // whatever gets returned from the reducer BECOMES the global state\n\nlet theReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"ADD_ONE_CHIP\":\n      let theChipIwantToAdd = action.payload;\n      let copyOfChips = [...state.chips, theChipIwantToAdd];\n      return { ...state,\n        chips: copyOfChips\n      };\n\n    case \"REMOVE_CHIP\":\n      let theChipName = action.payload;\n      let filteredChips = state.chips.filter(chip => {\n        return chip.name !== theChipName;\n      });\n      return { ...state,\n        chips: filteredChips\n      };\n\n    default:\n      return state;\n  }\n};\n\nlet storeObject = createStore(theReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\nReactDOM.render( /*#__PURE__*/React.createElement(Provider, {\n  store: storeObject,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 7\n  }\n})), document.getElementById('root')); //","map":{"version":3,"sources":["/Users/hyeokjung.kim/Flatiron-LI/012720/49-combining-it-all/frontend/src/index.js"],"names":["React","ReactDOM","App","createStore","Provider","initialState","chips","chipsArray","hello","theReducer","state","action","type","theChipIwantToAdd","payload","copyOfChips","theChipName","filteredChips","filter","chip","name","storeObject","window","__REDUX_DEVTOOLS_EXTENSION__","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB,C,CAEA;;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,QAAT,QAAyB,aAAzB;AAGA,IAAIC,YAAY,GAAG;AACjB;AACAC,EAAAA,KAAK,EAAEC,UAFU;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAAnB,C,CAYA;;AACA,IAAIC,UAAU,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AAEjD,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAK,cAAL;AAEE,UAAIC,iBAAiB,GAAGF,MAAM,CAACG,OAA/B;AACA,UAAIC,WAAW,GAAG,CAAC,GAAGL,KAAK,CAACJ,KAAV,EAAiBO,iBAAjB,CAAlB;AAGA,aAAO,EACL,GAAGH,KADE;AAELJ,QAAAA,KAAK,EAAES;AAFF,OAAP;;AAMF,SAAK,aAAL;AACE,UAAIC,WAAW,GAAGL,MAAM,CAACG,OAAzB;AACA,UAAIG,aAAa,GAAGP,KAAK,CAACJ,KAAN,CAAYY,MAAZ,CAAoBC,IAAD,IAAU;AAC/C,eAAOA,IAAI,CAACC,IAAL,KAAcJ,WAArB;AACD,OAFmB,CAApB;AAIA,aAAO,EACL,GAAGN,KADE;AAELJ,QAAAA,KAAK,EAAEW;AAFF,OAAP;;AAKF;AACE,aAAOP,KAAP;AA1BJ;AA6BD,CA/BD;;AAyCA,IAAIW,WAAW,GAAGlB,WAAW,CAACM,UAAD,EAAaa,MAAM,CAACC,4BAAP,IAAuCD,MAAM,CAACC,4BAAP,EAApD,CAA7B;AASAtB,QAAQ,CAACuB,MAAT,eACI,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEH,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADJ,EAIEI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,E,CAsCA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n// redux dependencies\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\n\n\nlet initialState = {\n  // Change the key-value pairs here\n  chips: chipsArray,\n  hello: \"From inside the state\"\n}\n\n\n\n\n\n\n\n// whatever gets returned from the reducer BECOMES the global state\nlet theReducer = (state = initialState, action) => {\n\n  switch (action.type) {\n\n    case \"ADD_ONE_CHIP\":\n\n      let theChipIwantToAdd = action.payload\n      let copyOfChips = [...state.chips, theChipIwantToAdd]\n\n\n      return {\n        ...state,\n        chips: copyOfChips\n      }\n\n\n    case \"REMOVE_CHIP\":\n      let theChipName = action.payload\n      let filteredChips = state.chips.filter((chip) => {\n        return chip.name !== theChipName\n      })\n\n      return {\n        ...state,\n        chips: filteredChips\n      }\n\n    default:\n      return state\n  }\n\n}\n\n\n\n\n\n\n\n\n\nlet storeObject = createStore(theReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\n\n\n\n\n\n\n\nReactDOM.render(\n    <Provider store={storeObject}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//\n"]},"metadata":{},"sourceType":"module"}